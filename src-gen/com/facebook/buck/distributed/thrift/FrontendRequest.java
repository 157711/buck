/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.distributed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-08-08")
public class FrontendRequest implements org.apache.thrift.TBase<FrontendRequest, FrontendRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FrontendRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FrontendRequest");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField START_BUILD_FIELD_DESC = new org.apache.thrift.protocol.TField("startBuild", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BUILD_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("buildStatus", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CAS_CONTAINS_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("casContainsRequest", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_BUILD_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("createBuildRequest", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField STORE_LOCAL_CHANGES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("storeLocalChangesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField FETCH_SOURCE_FILES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchSourceFilesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField STORE_BUILD_GRAPH_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("storeBuildGraphRequest", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField FETCH_BUILD_GRAPH_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchBuildGraphRequest", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FrontendRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FrontendRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequestType type; // optional
  public StartBuildRequest startBuild; // optional
  public BuildStatusRequest buildStatus; // optional
  public LogRequest log; // optional
  public CASContainsRequest casContainsRequest; // optional
  public CreateBuildRequest createBuildRequest; // optional
  public StoreLocalChangesRequest storeLocalChangesRequest; // optional
  public FetchSourceFilesRequest fetchSourceFilesRequest; // optional
  public StoreBuildGraphRequest storeBuildGraphRequest; // optional
  public FetchBuildGraphRequest fetchBuildGraphRequest; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FrontendRequestType
     */
    TYPE((short)1, "type"),
    START_BUILD((short)2, "startBuild"),
    BUILD_STATUS((short)3, "buildStatus"),
    LOG((short)6, "log"),
    CAS_CONTAINS_REQUEST((short)7, "casContainsRequest"),
    CREATE_BUILD_REQUEST((short)8, "createBuildRequest"),
    STORE_LOCAL_CHANGES_REQUEST((short)9, "storeLocalChangesRequest"),
    FETCH_SOURCE_FILES_REQUEST((short)10, "fetchSourceFilesRequest"),
    STORE_BUILD_GRAPH_REQUEST((short)11, "storeBuildGraphRequest"),
    FETCH_BUILD_GRAPH_REQUEST((short)12, "fetchBuildGraphRequest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // START_BUILD
          return START_BUILD;
        case 3: // BUILD_STATUS
          return BUILD_STATUS;
        case 6: // LOG
          return LOG;
        case 7: // CAS_CONTAINS_REQUEST
          return CAS_CONTAINS_REQUEST;
        case 8: // CREATE_BUILD_REQUEST
          return CREATE_BUILD_REQUEST;
        case 9: // STORE_LOCAL_CHANGES_REQUEST
          return STORE_LOCAL_CHANGES_REQUEST;
        case 10: // FETCH_SOURCE_FILES_REQUEST
          return FETCH_SOURCE_FILES_REQUEST;
        case 11: // STORE_BUILD_GRAPH_REQUEST
          return STORE_BUILD_GRAPH_REQUEST;
        case 12: // FETCH_BUILD_GRAPH_REQUEST
          return FETCH_BUILD_GRAPH_REQUEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.START_BUILD,_Fields.BUILD_STATUS,_Fields.LOG,_Fields.CAS_CONTAINS_REQUEST,_Fields.CREATE_BUILD_REQUEST,_Fields.STORE_LOCAL_CHANGES_REQUEST,_Fields.FETCH_SOURCE_FILES_REQUEST,_Fields.STORE_BUILD_GRAPH_REQUEST,_Fields.FETCH_BUILD_GRAPH_REQUEST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FrontendRequestType.class)));
    tmpMap.put(_Fields.START_BUILD, new org.apache.thrift.meta_data.FieldMetaData("startBuild", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartBuildRequest.class)));
    tmpMap.put(_Fields.BUILD_STATUS, new org.apache.thrift.meta_data.FieldMetaData("buildStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BuildStatusRequest.class)));
    tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LogRequest.class)));
    tmpMap.put(_Fields.CAS_CONTAINS_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("casContainsRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CASContainsRequest.class)));
    tmpMap.put(_Fields.CREATE_BUILD_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("createBuildRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CreateBuildRequest.class)));
    tmpMap.put(_Fields.STORE_LOCAL_CHANGES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("storeLocalChangesRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoreLocalChangesRequest.class)));
    tmpMap.put(_Fields.FETCH_SOURCE_FILES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("fetchSourceFilesRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FetchSourceFilesRequest.class)));
    tmpMap.put(_Fields.STORE_BUILD_GRAPH_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("storeBuildGraphRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StoreBuildGraphRequest.class)));
    tmpMap.put(_Fields.FETCH_BUILD_GRAPH_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("fetchBuildGraphRequest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FetchBuildGraphRequest.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FrontendRequest.class, metaDataMap);
  }

  public FrontendRequest() {
    this.type = com.facebook.buck.distributed.thrift.FrontendRequestType.UNKNOWN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FrontendRequest(FrontendRequest other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStartBuild()) {
      this.startBuild = new StartBuildRequest(other.startBuild);
    }
    if (other.isSetBuildStatus()) {
      this.buildStatus = new BuildStatusRequest(other.buildStatus);
    }
    if (other.isSetLog()) {
      this.log = new LogRequest(other.log);
    }
    if (other.isSetCasContainsRequest()) {
      this.casContainsRequest = new CASContainsRequest(other.casContainsRequest);
    }
    if (other.isSetCreateBuildRequest()) {
      this.createBuildRequest = new CreateBuildRequest(other.createBuildRequest);
    }
    if (other.isSetStoreLocalChangesRequest()) {
      this.storeLocalChangesRequest = new StoreLocalChangesRequest(other.storeLocalChangesRequest);
    }
    if (other.isSetFetchSourceFilesRequest()) {
      this.fetchSourceFilesRequest = new FetchSourceFilesRequest(other.fetchSourceFilesRequest);
    }
    if (other.isSetStoreBuildGraphRequest()) {
      this.storeBuildGraphRequest = new StoreBuildGraphRequest(other.storeBuildGraphRequest);
    }
    if (other.isSetFetchBuildGraphRequest()) {
      this.fetchBuildGraphRequest = new FetchBuildGraphRequest(other.fetchBuildGraphRequest);
    }
  }

  public FrontendRequest deepCopy() {
    return new FrontendRequest(this);
  }

  @Override
  public void clear() {
    this.type = com.facebook.buck.distributed.thrift.FrontendRequestType.UNKNOWN;

    this.startBuild = null;
    this.buildStatus = null;
    this.log = null;
    this.casContainsRequest = null;
    this.createBuildRequest = null;
    this.storeLocalChangesRequest = null;
    this.fetchSourceFilesRequest = null;
    this.storeBuildGraphRequest = null;
    this.fetchBuildGraphRequest = null;
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see FrontendRequestType
   */
  public FrontendRequest setType(FrontendRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public StartBuildRequest getStartBuild() {
    return this.startBuild;
  }

  public FrontendRequest setStartBuild(StartBuildRequest startBuild) {
    this.startBuild = startBuild;
    return this;
  }

  public void unsetStartBuild() {
    this.startBuild = null;
  }

  /** Returns true if field startBuild is set (has been assigned a value) and false otherwise */
  public boolean isSetStartBuild() {
    return this.startBuild != null;
  }

  public void setStartBuildIsSet(boolean value) {
    if (!value) {
      this.startBuild = null;
    }
  }

  public BuildStatusRequest getBuildStatus() {
    return this.buildStatus;
  }

  public FrontendRequest setBuildStatus(BuildStatusRequest buildStatus) {
    this.buildStatus = buildStatus;
    return this;
  }

  public void unsetBuildStatus() {
    this.buildStatus = null;
  }

  /** Returns true if field buildStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildStatus() {
    return this.buildStatus != null;
  }

  public void setBuildStatusIsSet(boolean value) {
    if (!value) {
      this.buildStatus = null;
    }
  }

  public LogRequest getLog() {
    return this.log;
  }

  public FrontendRequest setLog(LogRequest log) {
    this.log = log;
    return this;
  }

  public void unsetLog() {
    this.log = null;
  }

  /** Returns true if field log is set (has been assigned a value) and false otherwise */
  public boolean isSetLog() {
    return this.log != null;
  }

  public void setLogIsSet(boolean value) {
    if (!value) {
      this.log = null;
    }
  }

  public CASContainsRequest getCasContainsRequest() {
    return this.casContainsRequest;
  }

  public FrontendRequest setCasContainsRequest(CASContainsRequest casContainsRequest) {
    this.casContainsRequest = casContainsRequest;
    return this;
  }

  public void unsetCasContainsRequest() {
    this.casContainsRequest = null;
  }

  /** Returns true if field casContainsRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetCasContainsRequest() {
    return this.casContainsRequest != null;
  }

  public void setCasContainsRequestIsSet(boolean value) {
    if (!value) {
      this.casContainsRequest = null;
    }
  }

  public CreateBuildRequest getCreateBuildRequest() {
    return this.createBuildRequest;
  }

  public FrontendRequest setCreateBuildRequest(CreateBuildRequest createBuildRequest) {
    this.createBuildRequest = createBuildRequest;
    return this;
  }

  public void unsetCreateBuildRequest() {
    this.createBuildRequest = null;
  }

  /** Returns true if field createBuildRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateBuildRequest() {
    return this.createBuildRequest != null;
  }

  public void setCreateBuildRequestIsSet(boolean value) {
    if (!value) {
      this.createBuildRequest = null;
    }
  }

  public StoreLocalChangesRequest getStoreLocalChangesRequest() {
    return this.storeLocalChangesRequest;
  }

  public FrontendRequest setStoreLocalChangesRequest(StoreLocalChangesRequest storeLocalChangesRequest) {
    this.storeLocalChangesRequest = storeLocalChangesRequest;
    return this;
  }

  public void unsetStoreLocalChangesRequest() {
    this.storeLocalChangesRequest = null;
  }

  /** Returns true if field storeLocalChangesRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreLocalChangesRequest() {
    return this.storeLocalChangesRequest != null;
  }

  public void setStoreLocalChangesRequestIsSet(boolean value) {
    if (!value) {
      this.storeLocalChangesRequest = null;
    }
  }

  public FetchSourceFilesRequest getFetchSourceFilesRequest() {
    return this.fetchSourceFilesRequest;
  }

  public FrontendRequest setFetchSourceFilesRequest(FetchSourceFilesRequest fetchSourceFilesRequest) {
    this.fetchSourceFilesRequest = fetchSourceFilesRequest;
    return this;
  }

  public void unsetFetchSourceFilesRequest() {
    this.fetchSourceFilesRequest = null;
  }

  /** Returns true if field fetchSourceFilesRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchSourceFilesRequest() {
    return this.fetchSourceFilesRequest != null;
  }

  public void setFetchSourceFilesRequestIsSet(boolean value) {
    if (!value) {
      this.fetchSourceFilesRequest = null;
    }
  }

  public StoreBuildGraphRequest getStoreBuildGraphRequest() {
    return this.storeBuildGraphRequest;
  }

  public FrontendRequest setStoreBuildGraphRequest(StoreBuildGraphRequest storeBuildGraphRequest) {
    this.storeBuildGraphRequest = storeBuildGraphRequest;
    return this;
  }

  public void unsetStoreBuildGraphRequest() {
    this.storeBuildGraphRequest = null;
  }

  /** Returns true if field storeBuildGraphRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreBuildGraphRequest() {
    return this.storeBuildGraphRequest != null;
  }

  public void setStoreBuildGraphRequestIsSet(boolean value) {
    if (!value) {
      this.storeBuildGraphRequest = null;
    }
  }

  public FetchBuildGraphRequest getFetchBuildGraphRequest() {
    return this.fetchBuildGraphRequest;
  }

  public FrontendRequest setFetchBuildGraphRequest(FetchBuildGraphRequest fetchBuildGraphRequest) {
    this.fetchBuildGraphRequest = fetchBuildGraphRequest;
    return this;
  }

  public void unsetFetchBuildGraphRequest() {
    this.fetchBuildGraphRequest = null;
  }

  /** Returns true if field fetchBuildGraphRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchBuildGraphRequest() {
    return this.fetchBuildGraphRequest != null;
  }

  public void setFetchBuildGraphRequestIsSet(boolean value) {
    if (!value) {
      this.fetchBuildGraphRequest = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((FrontendRequestType)value);
      }
      break;

    case START_BUILD:
      if (value == null) {
        unsetStartBuild();
      } else {
        setStartBuild((StartBuildRequest)value);
      }
      break;

    case BUILD_STATUS:
      if (value == null) {
        unsetBuildStatus();
      } else {
        setBuildStatus((BuildStatusRequest)value);
      }
      break;

    case LOG:
      if (value == null) {
        unsetLog();
      } else {
        setLog((LogRequest)value);
      }
      break;

    case CAS_CONTAINS_REQUEST:
      if (value == null) {
        unsetCasContainsRequest();
      } else {
        setCasContainsRequest((CASContainsRequest)value);
      }
      break;

    case CREATE_BUILD_REQUEST:
      if (value == null) {
        unsetCreateBuildRequest();
      } else {
        setCreateBuildRequest((CreateBuildRequest)value);
      }
      break;

    case STORE_LOCAL_CHANGES_REQUEST:
      if (value == null) {
        unsetStoreLocalChangesRequest();
      } else {
        setStoreLocalChangesRequest((StoreLocalChangesRequest)value);
      }
      break;

    case FETCH_SOURCE_FILES_REQUEST:
      if (value == null) {
        unsetFetchSourceFilesRequest();
      } else {
        setFetchSourceFilesRequest((FetchSourceFilesRequest)value);
      }
      break;

    case STORE_BUILD_GRAPH_REQUEST:
      if (value == null) {
        unsetStoreBuildGraphRequest();
      } else {
        setStoreBuildGraphRequest((StoreBuildGraphRequest)value);
      }
      break;

    case FETCH_BUILD_GRAPH_REQUEST:
      if (value == null) {
        unsetFetchBuildGraphRequest();
      } else {
        setFetchBuildGraphRequest((FetchBuildGraphRequest)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case START_BUILD:
      return getStartBuild();

    case BUILD_STATUS:
      return getBuildStatus();

    case LOG:
      return getLog();

    case CAS_CONTAINS_REQUEST:
      return getCasContainsRequest();

    case CREATE_BUILD_REQUEST:
      return getCreateBuildRequest();

    case STORE_LOCAL_CHANGES_REQUEST:
      return getStoreLocalChangesRequest();

    case FETCH_SOURCE_FILES_REQUEST:
      return getFetchSourceFilesRequest();

    case STORE_BUILD_GRAPH_REQUEST:
      return getStoreBuildGraphRequest();

    case FETCH_BUILD_GRAPH_REQUEST:
      return getFetchBuildGraphRequest();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case START_BUILD:
      return isSetStartBuild();
    case BUILD_STATUS:
      return isSetBuildStatus();
    case LOG:
      return isSetLog();
    case CAS_CONTAINS_REQUEST:
      return isSetCasContainsRequest();
    case CREATE_BUILD_REQUEST:
      return isSetCreateBuildRequest();
    case STORE_LOCAL_CHANGES_REQUEST:
      return isSetStoreLocalChangesRequest();
    case FETCH_SOURCE_FILES_REQUEST:
      return isSetFetchSourceFilesRequest();
    case STORE_BUILD_GRAPH_REQUEST:
      return isSetStoreBuildGraphRequest();
    case FETCH_BUILD_GRAPH_REQUEST:
      return isSetFetchBuildGraphRequest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FrontendRequest)
      return this.equals((FrontendRequest)that);
    return false;
  }

  public boolean equals(FrontendRequest that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_startBuild = true && this.isSetStartBuild();
    boolean that_present_startBuild = true && that.isSetStartBuild();
    if (this_present_startBuild || that_present_startBuild) {
      if (!(this_present_startBuild && that_present_startBuild))
        return false;
      if (!this.startBuild.equals(that.startBuild))
        return false;
    }

    boolean this_present_buildStatus = true && this.isSetBuildStatus();
    boolean that_present_buildStatus = true && that.isSetBuildStatus();
    if (this_present_buildStatus || that_present_buildStatus) {
      if (!(this_present_buildStatus && that_present_buildStatus))
        return false;
      if (!this.buildStatus.equals(that.buildStatus))
        return false;
    }

    boolean this_present_log = true && this.isSetLog();
    boolean that_present_log = true && that.isSetLog();
    if (this_present_log || that_present_log) {
      if (!(this_present_log && that_present_log))
        return false;
      if (!this.log.equals(that.log))
        return false;
    }

    boolean this_present_casContainsRequest = true && this.isSetCasContainsRequest();
    boolean that_present_casContainsRequest = true && that.isSetCasContainsRequest();
    if (this_present_casContainsRequest || that_present_casContainsRequest) {
      if (!(this_present_casContainsRequest && that_present_casContainsRequest))
        return false;
      if (!this.casContainsRequest.equals(that.casContainsRequest))
        return false;
    }

    boolean this_present_createBuildRequest = true && this.isSetCreateBuildRequest();
    boolean that_present_createBuildRequest = true && that.isSetCreateBuildRequest();
    if (this_present_createBuildRequest || that_present_createBuildRequest) {
      if (!(this_present_createBuildRequest && that_present_createBuildRequest))
        return false;
      if (!this.createBuildRequest.equals(that.createBuildRequest))
        return false;
    }

    boolean this_present_storeLocalChangesRequest = true && this.isSetStoreLocalChangesRequest();
    boolean that_present_storeLocalChangesRequest = true && that.isSetStoreLocalChangesRequest();
    if (this_present_storeLocalChangesRequest || that_present_storeLocalChangesRequest) {
      if (!(this_present_storeLocalChangesRequest && that_present_storeLocalChangesRequest))
        return false;
      if (!this.storeLocalChangesRequest.equals(that.storeLocalChangesRequest))
        return false;
    }

    boolean this_present_fetchSourceFilesRequest = true && this.isSetFetchSourceFilesRequest();
    boolean that_present_fetchSourceFilesRequest = true && that.isSetFetchSourceFilesRequest();
    if (this_present_fetchSourceFilesRequest || that_present_fetchSourceFilesRequest) {
      if (!(this_present_fetchSourceFilesRequest && that_present_fetchSourceFilesRequest))
        return false;
      if (!this.fetchSourceFilesRequest.equals(that.fetchSourceFilesRequest))
        return false;
    }

    boolean this_present_storeBuildGraphRequest = true && this.isSetStoreBuildGraphRequest();
    boolean that_present_storeBuildGraphRequest = true && that.isSetStoreBuildGraphRequest();
    if (this_present_storeBuildGraphRequest || that_present_storeBuildGraphRequest) {
      if (!(this_present_storeBuildGraphRequest && that_present_storeBuildGraphRequest))
        return false;
      if (!this.storeBuildGraphRequest.equals(that.storeBuildGraphRequest))
        return false;
    }

    boolean this_present_fetchBuildGraphRequest = true && this.isSetFetchBuildGraphRequest();
    boolean that_present_fetchBuildGraphRequest = true && that.isSetFetchBuildGraphRequest();
    if (this_present_fetchBuildGraphRequest || that_present_fetchBuildGraphRequest) {
      if (!(this_present_fetchBuildGraphRequest && that_present_fetchBuildGraphRequest))
        return false;
      if (!this.fetchBuildGraphRequest.equals(that.fetchBuildGraphRequest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_startBuild = true && (isSetStartBuild());
    list.add(present_startBuild);
    if (present_startBuild)
      list.add(startBuild);

    boolean present_buildStatus = true && (isSetBuildStatus());
    list.add(present_buildStatus);
    if (present_buildStatus)
      list.add(buildStatus);

    boolean present_log = true && (isSetLog());
    list.add(present_log);
    if (present_log)
      list.add(log);

    boolean present_casContainsRequest = true && (isSetCasContainsRequest());
    list.add(present_casContainsRequest);
    if (present_casContainsRequest)
      list.add(casContainsRequest);

    boolean present_createBuildRequest = true && (isSetCreateBuildRequest());
    list.add(present_createBuildRequest);
    if (present_createBuildRequest)
      list.add(createBuildRequest);

    boolean present_storeLocalChangesRequest = true && (isSetStoreLocalChangesRequest());
    list.add(present_storeLocalChangesRequest);
    if (present_storeLocalChangesRequest)
      list.add(storeLocalChangesRequest);

    boolean present_fetchSourceFilesRequest = true && (isSetFetchSourceFilesRequest());
    list.add(present_fetchSourceFilesRequest);
    if (present_fetchSourceFilesRequest)
      list.add(fetchSourceFilesRequest);

    boolean present_storeBuildGraphRequest = true && (isSetStoreBuildGraphRequest());
    list.add(present_storeBuildGraphRequest);
    if (present_storeBuildGraphRequest)
      list.add(storeBuildGraphRequest);

    boolean present_fetchBuildGraphRequest = true && (isSetFetchBuildGraphRequest());
    list.add(present_fetchBuildGraphRequest);
    if (present_fetchBuildGraphRequest)
      list.add(fetchBuildGraphRequest);

    return list.hashCode();
  }

  @Override
  public int compareTo(FrontendRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartBuild()).compareTo(other.isSetStartBuild());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartBuild()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startBuild, other.startBuild);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuildStatus()).compareTo(other.isSetBuildStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildStatus, other.buildStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCasContainsRequest()).compareTo(other.isSetCasContainsRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCasContainsRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.casContainsRequest, other.casContainsRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateBuildRequest()).compareTo(other.isSetCreateBuildRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateBuildRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createBuildRequest, other.createBuildRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreLocalChangesRequest()).compareTo(other.isSetStoreLocalChangesRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreLocalChangesRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeLocalChangesRequest, other.storeLocalChangesRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchSourceFilesRequest()).compareTo(other.isSetFetchSourceFilesRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchSourceFilesRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchSourceFilesRequest, other.fetchSourceFilesRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStoreBuildGraphRequest()).compareTo(other.isSetStoreBuildGraphRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreBuildGraphRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeBuildGraphRequest, other.storeBuildGraphRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFetchBuildGraphRequest()).compareTo(other.isSetFetchBuildGraphRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchBuildGraphRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchBuildGraphRequest, other.fetchBuildGraphRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FrontendRequest(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetStartBuild()) {
      if (!first) sb.append(", ");
      sb.append("startBuild:");
      if (this.startBuild == null) {
        sb.append("null");
      } else {
        sb.append(this.startBuild);
      }
      first = false;
    }
    if (isSetBuildStatus()) {
      if (!first) sb.append(", ");
      sb.append("buildStatus:");
      if (this.buildStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.buildStatus);
      }
      first = false;
    }
    if (isSetLog()) {
      if (!first) sb.append(", ");
      sb.append("log:");
      if (this.log == null) {
        sb.append("null");
      } else {
        sb.append(this.log);
      }
      first = false;
    }
    if (isSetCasContainsRequest()) {
      if (!first) sb.append(", ");
      sb.append("casContainsRequest:");
      if (this.casContainsRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.casContainsRequest);
      }
      first = false;
    }
    if (isSetCreateBuildRequest()) {
      if (!first) sb.append(", ");
      sb.append("createBuildRequest:");
      if (this.createBuildRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.createBuildRequest);
      }
      first = false;
    }
    if (isSetStoreLocalChangesRequest()) {
      if (!first) sb.append(", ");
      sb.append("storeLocalChangesRequest:");
      if (this.storeLocalChangesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.storeLocalChangesRequest);
      }
      first = false;
    }
    if (isSetFetchSourceFilesRequest()) {
      if (!first) sb.append(", ");
      sb.append("fetchSourceFilesRequest:");
      if (this.fetchSourceFilesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchSourceFilesRequest);
      }
      first = false;
    }
    if (isSetStoreBuildGraphRequest()) {
      if (!first) sb.append(", ");
      sb.append("storeBuildGraphRequest:");
      if (this.storeBuildGraphRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.storeBuildGraphRequest);
      }
      first = false;
    }
    if (isSetFetchBuildGraphRequest()) {
      if (!first) sb.append(", ");
      sb.append("fetchBuildGraphRequest:");
      if (this.fetchBuildGraphRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchBuildGraphRequest);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (startBuild != null) {
      startBuild.validate();
    }
    if (buildStatus != null) {
      buildStatus.validate();
    }
    if (log != null) {
      log.validate();
    }
    if (casContainsRequest != null) {
      casContainsRequest.validate();
    }
    if (createBuildRequest != null) {
      createBuildRequest.validate();
    }
    if (storeLocalChangesRequest != null) {
      storeLocalChangesRequest.validate();
    }
    if (fetchSourceFilesRequest != null) {
      fetchSourceFilesRequest.validate();
    }
    if (storeBuildGraphRequest != null) {
      storeBuildGraphRequest.validate();
    }
    if (fetchBuildGraphRequest != null) {
      fetchBuildGraphRequest.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FrontendRequestStandardSchemeFactory implements SchemeFactory {
    public FrontendRequestStandardScheme getScheme() {
      return new FrontendRequestStandardScheme();
    }
  }

  private static class FrontendRequestStandardScheme extends StandardScheme<FrontendRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FrontendRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_BUILD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startBuild = new StartBuildRequest();
              struct.startBuild.read(iprot);
              struct.setStartBuildIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUILD_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.buildStatus = new BuildStatusRequest();
              struct.buildStatus.read(iprot);
              struct.setBuildStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.log = new LogRequest();
              struct.log.read(iprot);
              struct.setLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CAS_CONTAINS_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.casContainsRequest = new CASContainsRequest();
              struct.casContainsRequest.read(iprot);
              struct.setCasContainsRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_BUILD_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.createBuildRequest = new CreateBuildRequest();
              struct.createBuildRequest.read(iprot);
              struct.setCreateBuildRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STORE_LOCAL_CHANGES_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storeLocalChangesRequest = new StoreLocalChangesRequest();
              struct.storeLocalChangesRequest.read(iprot);
              struct.setStoreLocalChangesRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FETCH_SOURCE_FILES_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchSourceFilesRequest = new FetchSourceFilesRequest();
              struct.fetchSourceFilesRequest.read(iprot);
              struct.setFetchSourceFilesRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STORE_BUILD_GRAPH_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storeBuildGraphRequest = new StoreBuildGraphRequest();
              struct.storeBuildGraphRequest.read(iprot);
              struct.setStoreBuildGraphRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FETCH_BUILD_GRAPH_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fetchBuildGraphRequest = new FetchBuildGraphRequest();
              struct.fetchBuildGraphRequest.read(iprot);
              struct.setFetchBuildGraphRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FrontendRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.startBuild != null) {
        if (struct.isSetStartBuild()) {
          oprot.writeFieldBegin(START_BUILD_FIELD_DESC);
          struct.startBuild.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildStatus != null) {
        if (struct.isSetBuildStatus()) {
          oprot.writeFieldBegin(BUILD_STATUS_FIELD_DESC);
          struct.buildStatus.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.log != null) {
        if (struct.isSetLog()) {
          oprot.writeFieldBegin(LOG_FIELD_DESC);
          struct.log.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.casContainsRequest != null) {
        if (struct.isSetCasContainsRequest()) {
          oprot.writeFieldBegin(CAS_CONTAINS_REQUEST_FIELD_DESC);
          struct.casContainsRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createBuildRequest != null) {
        if (struct.isSetCreateBuildRequest()) {
          oprot.writeFieldBegin(CREATE_BUILD_REQUEST_FIELD_DESC);
          struct.createBuildRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storeLocalChangesRequest != null) {
        if (struct.isSetStoreLocalChangesRequest()) {
          oprot.writeFieldBegin(STORE_LOCAL_CHANGES_REQUEST_FIELD_DESC);
          struct.storeLocalChangesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchSourceFilesRequest != null) {
        if (struct.isSetFetchSourceFilesRequest()) {
          oprot.writeFieldBegin(FETCH_SOURCE_FILES_REQUEST_FIELD_DESC);
          struct.fetchSourceFilesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storeBuildGraphRequest != null) {
        if (struct.isSetStoreBuildGraphRequest()) {
          oprot.writeFieldBegin(STORE_BUILD_GRAPH_REQUEST_FIELD_DESC);
          struct.storeBuildGraphRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fetchBuildGraphRequest != null) {
        if (struct.isSetFetchBuildGraphRequest()) {
          oprot.writeFieldBegin(FETCH_BUILD_GRAPH_REQUEST_FIELD_DESC);
          struct.fetchBuildGraphRequest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FrontendRequestTupleSchemeFactory implements SchemeFactory {
    public FrontendRequestTupleScheme getScheme() {
      return new FrontendRequestTupleScheme();
    }
  }

  private static class FrontendRequestTupleScheme extends TupleScheme<FrontendRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FrontendRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetStartBuild()) {
        optionals.set(1);
      }
      if (struct.isSetBuildStatus()) {
        optionals.set(2);
      }
      if (struct.isSetLog()) {
        optionals.set(3);
      }
      if (struct.isSetCasContainsRequest()) {
        optionals.set(4);
      }
      if (struct.isSetCreateBuildRequest()) {
        optionals.set(5);
      }
      if (struct.isSetStoreLocalChangesRequest()) {
        optionals.set(6);
      }
      if (struct.isSetFetchSourceFilesRequest()) {
        optionals.set(7);
      }
      if (struct.isSetStoreBuildGraphRequest()) {
        optionals.set(8);
      }
      if (struct.isSetFetchBuildGraphRequest()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetStartBuild()) {
        struct.startBuild.write(oprot);
      }
      if (struct.isSetBuildStatus()) {
        struct.buildStatus.write(oprot);
      }
      if (struct.isSetLog()) {
        struct.log.write(oprot);
      }
      if (struct.isSetCasContainsRequest()) {
        struct.casContainsRequest.write(oprot);
      }
      if (struct.isSetCreateBuildRequest()) {
        struct.createBuildRequest.write(oprot);
      }
      if (struct.isSetStoreLocalChangesRequest()) {
        struct.storeLocalChangesRequest.write(oprot);
      }
      if (struct.isSetFetchSourceFilesRequest()) {
        struct.fetchSourceFilesRequest.write(oprot);
      }
      if (struct.isSetStoreBuildGraphRequest()) {
        struct.storeBuildGraphRequest.write(oprot);
      }
      if (struct.isSetFetchBuildGraphRequest()) {
        struct.fetchBuildGraphRequest.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FrontendRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.type = com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startBuild = new StartBuildRequest();
        struct.startBuild.read(iprot);
        struct.setStartBuildIsSet(true);
      }
      if (incoming.get(2)) {
        struct.buildStatus = new BuildStatusRequest();
        struct.buildStatus.read(iprot);
        struct.setBuildStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.log = new LogRequest();
        struct.log.read(iprot);
        struct.setLogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.casContainsRequest = new CASContainsRequest();
        struct.casContainsRequest.read(iprot);
        struct.setCasContainsRequestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createBuildRequest = new CreateBuildRequest();
        struct.createBuildRequest.read(iprot);
        struct.setCreateBuildRequestIsSet(true);
      }
      if (incoming.get(6)) {
        struct.storeLocalChangesRequest = new StoreLocalChangesRequest();
        struct.storeLocalChangesRequest.read(iprot);
        struct.setStoreLocalChangesRequestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fetchSourceFilesRequest = new FetchSourceFilesRequest();
        struct.fetchSourceFilesRequest.read(iprot);
        struct.setFetchSourceFilesRequestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.storeBuildGraphRequest = new StoreBuildGraphRequest();
        struct.storeBuildGraphRequest.read(iprot);
        struct.setStoreBuildGraphRequestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fetchBuildGraphRequest = new FetchBuildGraphRequest();
        struct.fetchBuildGraphRequest.read(iprot);
        struct.setFetchBuildGraphRequestIsSet(true);
      }
    }
  }

}

