{namespace buck.project}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck project' /}
    {param description}
      A command that generates the configuration files for an IDE to work with the project.
    {/param}
    {param content}


{call buck.command}
{param overview}
<p>
  This command generates the configuration files for an IDE to work with the project.  This command
  creates files in-place in the repository, which is unlike other Buck commands whose output is
  removed by {call buck.cmd_clean /}.  As a result, it is a good idea to add these generated files
  to the list of ignored files by your choice of source control.  IDE-specific details are discussed
  in each section below.
</p>

<p>
  You can use this command by itself to generate a project for the entire repository.
</p>

{literal}<pre>buck project</pre>{/literal}

<p>
  You can also use this command to build a project slice (a project that represents a subset of the
  repository).  You can pass any number of {call buck.build_target /}s or
  {sp}{call buck.build_target_pattern /}s to the command.  The constructed project slice will
  contain the specified targets and their dependencies.  This is useful for large repositories.
</p>

{literal}<pre>buck project //java/...</pre>{/literal}

<h2>Common Parameters</h2>

<ul class="{css arglist}">
{call buck.param}
  {param name: 'ide' /}
  {param desc}
    Specifies which IDE to create the project for.  When using a project slice, Buck tries to
    determine what type of IDE to use automatically based on the {call buck.build_target /}s
    provided.
  {/param}
{/call}

{call buck.param}
  {param name: 'without-tests' /}
  {param desc}
    Indicates that Buck should build a project slice without tests (the default is to include any
    tests that reference the targets in the project with <code>source_under_test</code> on
    {sp}<code>*_test</code> rules and <code>tests</code> on <code>*_library</code> and
    {sp}<code>*_binary</code> rules).
  {/param}
{/call}

{call buck.param}
  {param name: 'without-dependencies-tests' /}
  {param desc}
    Indicates that Buck should build a project slice with the tests of the specified targets only.
  {/param}
{/call}
</ul>

<h2>Supported IDEs</h2>

<ul>
  <li><a href="#intellij">IntelliJ</a></li>
</ul>

<h3 id="intellij">IntelliJ</h3>

<p>
  This command processes all of the {call buck.project_config /} rules across all of the
  {sp}{call buck.build_file /}s whose targets were specified and uses them to generate the
  configuration files for an IDE.  The generated files include:
</p>

<ul>
  <li>
    <code>.idea/libraries&#x2F;*.xml</code>, each of which defines a library in IntelliJ.  A library
    always corresponds to a {call buck.prebuilt_jar /}.
  </li>
  <li>
    <code>.iml</code> files, each of which defines a module in IntelliJ.  An <code>.iml</code> file
    will be created in each directory with a {call buck.build_file /} that has a
    {sp}{call buck.project_config /}.  A module can depend on other modules, as well as libraries.
    It should be noted that although Buck allows multiple build targets per build file, IntelliJ's
    modules are only defined at the directory level.  This means that you may find IntelliJ flagging
    compilation errors because of missing dependencies of classes outside of your project slice, but
    which happen to be in the same directory as classes within the slice.
  </li>
  <li>
    <code>.idea/modules.xml</code>, which lists all of the IntelliJ modules in the project.
  </li>
</ul>
{/param}

{/call}

    {/param}  // content
  {/call} // buck.page
{/template}
