/*
 * Copyright 2014-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.facebook.buck.jvm.java.abi;

import com.google.common.io.ByteSource;

import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.InnerClassNode;

import javax.annotation.Nullable;

class ClassMirror extends ClassVisitor implements Comparable<ClassMirror> {

  private final String fileName;
  private final ClassNode node;

  public ClassMirror(String name) {
    this(name, new ClassNode());
  }

  private ClassMirror(String name, ClassNode node) {
    super(Opcodes.ASM5, node);
    this.fileName = name;
    this.node = node;
  }

  @Override
  @Nullable
  public FieldVisitor visitField(
      int access,
      String name,
      String desc,
      String signature,
      Object value) {
    if ((access & Opcodes.ACC_PRIVATE) > 0) {
      return null;
    }

    return super.visitField(access, name, desc, signature, value);
  }

  @Override
  @Nullable
  public MethodVisitor visitMethod(
      int access, String name, String desc, String signature, String[] exceptions) {

    // Per JVMS8 2.9, "Class and interface initialization methods are invoked
    // implicitly by the Java Virtual Machine; they are never invoked directly from any
    // Java Virtual Machine instruction, but are invoked only indirectly as part of the class
    // initialization process." Thus we don't need to emit a stub of <clinit>.
    if (((access & Opcodes.ACC_PRIVATE) > 0) ||
        (name.equals("<clinit>") && (access & Opcodes.ACC_STATIC) > 0)) {
      return null;
    }

    // Bridge methods are created by the compiler, and don't appear in source. It would be nice to
    // skip them, but they're used by the compiler to cover the fact that type erasure has occurred.
    // Normally the compiler adds these as public methods, but if you're compiling against a stub
    // produced using our ABI generator, we don't want people calling it accidentally. Oh well, I
    // guess it happens IRL too.
    //
    // Synthetic methods are also generated by the compiler, unless it's one of the methods named in
    // section 4.7.8 of the JVM spec, which are "<init>" and "Enum.valueOf()" and "Enum.values".
    // None of these are actually harmful to the ABI, so we allow synthetic methods through.
    // http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.8
    return super.visitMethod(access, name, desc, signature, exceptions);
  }

  @Override
  public void visitInnerClass(String name, String outerName, String innerName, int access) {
    if ((access & Opcodes.ACC_PRIVATE) > 0) {
      return;
    }

    String currentClassName = node.name;
    if (currentClassName.equals(name) || currentClassName.equals(outerName)) {
      // InnerClasses attributes are normally present for any member class (of any type) that is
      // referenced from code in this class file. However, for stubbing purposes we need only
      // include InnerClasses attributes for the class itself (if it is a member class, so that
      // the compiler can know that), and for the member classes of this class (so that the
      // compiler knows to go looking for them). All of the other ones are only needed at runtime.
      super.visitInnerClass(name, outerName, innerName, access);
    }
  }

  @Override
  public int compareTo(ClassMirror o) {
    if (this == o) {
      return 0;
    }

    return fileName.compareTo(o.fileName);
  }

  public boolean isAnonymousOrLocalClass() {
    InnerClassNode innerClass = getInnerClassMetadata();
    if (innerClass == null) {
      return false;
    }

    return innerClass.outerName == null;
  }

  @Nullable
  private InnerClassNode getInnerClassMetadata() {
    for (InnerClassNode innerClass : node.innerClasses) {
      if (innerClass.name.equals(node.name)) {
        return innerClass;
      }
    }

    return null;
  }

  public ByteSource getStubClassBytes() {
    ClassWriter writer = new ClassWriter(0);

    node.accept(writer);

    return ByteSource.wrap(writer.toByteArray());
  }
}

