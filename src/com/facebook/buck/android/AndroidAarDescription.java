/*
 * Copyright 2014-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.facebook.buck.android;

import com.facebook.buck.model.BuildTarget;
import com.facebook.buck.model.BuildTargets;
import com.facebook.buck.model.Flavor;
import com.facebook.buck.model.ImmutableFlavor;
import com.facebook.buck.rules.BuildRule;
import com.facebook.buck.rules.BuildRuleParams;
import com.facebook.buck.rules.BuildRuleResolver;
import com.facebook.buck.rules.BuildRuleType;
import com.facebook.buck.rules.Description;
import com.facebook.buck.rules.ImmutableBuildRuleType;
import com.facebook.buck.rules.SourcePath;
import com.facebook.buck.rules.SourcePathResolver;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableSortedSet;
import com.facebook.infer.annotation.SuppressFieldNotInitialized;

/**
 * Description for a {@link BuildRule} that generates an {@code .aar} file.
 * <p>
 * This represents an Android Library Project packaged as an {@code .aar} bundle as specified by:
 * <a> http://tools.android.com/tech-docs/new-build-system/aar-format </>.
 * <p>
 * Note that the {@code aar} may be specified as a {@link SourcePath}, so it could be either
 * a binary {@code .aar} file checked into version control, or a zip file that conforms to the
 * {@code .aar} specification that is generated by another build rule.
 */
public class AndroidAarDescription implements Description<AndroidAarDescription.Arg> {

  public static final BuildRuleType TYPE = ImmutableBuildRuleType.of("android_aar");

  private static final Flavor AAR_ANDROID_MANIFEST_FLAVOR =
      ImmutableFlavor.of("aar_android_manifest");

  private final AndroidManifestDescription androidManifestDescription;

  public AndroidAarDescription(
      AndroidManifestDescription androidManifestDescription) {
    this.androidManifestDescription = androidManifestDescription;
  }

  @Override
  public BuildRuleType getBuildRuleType() {
    return TYPE;
  }

  @Override
  public Arg createUnpopulatedConstructorArg() {
    return new Arg();
  }

  @Override
  public <A extends Arg> BuildRule createBuildRule(
      BuildRuleParams originalBuildRuleParams,
      BuildRuleResolver resolver,
      A args) {

    BuildTarget originalBuildTarget = originalBuildRuleParams.getBuildTarget();
    SourcePathResolver pathResolver = new SourcePathResolver(resolver);

    // android_manifest
    AndroidManifestDescription.Arg androidManifestArgs =
        androidManifestDescription.createUnpopulatedConstructorArg();
    androidManifestArgs.skeleton = args.manifestSkeleton;
    androidManifestArgs.deps = args.deps;

    BuildRuleParams androidManifestParams = originalBuildRuleParams.copyWithChanges(
        AndroidManifestDescription.TYPE,
        BuildTargets.createFlavoredBuildTarget(originalBuildTarget, AAR_ANDROID_MANIFEST_FLAVOR),
        originalBuildRuleParams.getDeclaredDeps(),
        originalBuildRuleParams.getExtraDeps());

    AndroidManifest manifest = androidManifestDescription.createBuildRule(
        androidManifestParams,
        resolver,
        androidManifestArgs);

    resolver.addToIndex(manifest);

    // android_aar
    BuildRuleParams androidAarParams = originalBuildRuleParams.copyWithChanges(
        TYPE,
        originalBuildTarget,
        /* declaredDeps */ ImmutableSortedSet.<BuildRule>of(manifest),
        /* extraDeps */ ImmutableSortedSet.<BuildRule>of());

    return new AndroidAar(
        androidAarParams,
        pathResolver,
        manifest);
  }

  @SuppressFieldNotInitialized
  public static class Arg {
    public SourcePath manifestSkeleton;
    public Optional<ImmutableSortedSet<BuildTarget>> deps;
  }
}
